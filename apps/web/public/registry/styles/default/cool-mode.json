{
  "name": "cool-mode",
  "files": [
    {
      "name": "cool-mode.tsx",
      "content": "'use client'\r\nimport type { ReactNode } from 'react'\r\nimport React, { useEffect, useRef } from 'react'\r\n\r\nexport interface BaseParticle {\r\n   element: HTMLElement | SVGSVGElement\r\n   left: number\r\n   size: number\r\n   top: number\r\n}\r\n\r\nexport interface BaseParticleOptions {\r\n   particle?: string\r\n   size?: number\r\n}\r\n\r\nexport interface CoolParticle extends BaseParticle {\r\n   direction: number\r\n   speedHorz: number\r\n   speedUp: number\r\n   spinSpeed: number\r\n   spinVal: number\r\n}\r\n\r\nexport interface CoolParticleOptions extends BaseParticleOptions {\r\n   particleCount?: number\r\n   speedHorz?: number\r\n   speedUp?: number\r\n}\r\n\r\nfunction getContainer() {\r\n   const id = '_coolMode_effect'\r\n   const existingContainer = document.getElementById(id)\r\n\r\n   if (existingContainer)\r\n      return existingContainer\r\n\r\n   const container = document.createElement('div')\r\n   container.setAttribute('id', id)\r\n   container.setAttribute(\r\n      'style',\r\n      'overflow:hidden; position:fixed; height:100%; top:0; left:0; right:0; bottom:0; pointer-events:none; z-index:2147483647',\r\n   )\r\n\r\n   document.body.appendChild(container)\r\n\r\n   return container\r\n}\r\n\r\nlet instanceCounter = 0\r\n\r\nfunction applyParticleEffect(element: HTMLElement, options?: CoolParticleOptions): (() => void) {\r\n   instanceCounter++\r\n\r\n   const defaultParticle = 'circle'\r\n   const particleType = options?.particle || defaultParticle\r\n   const sizes = [15, 20, 25, 35, 45]\r\n   const limit = 45\r\n\r\n   let particles: CoolParticle[] = []\r\n   let autoAddParticle = false\r\n   let mouseX = 0\r\n   let mouseY = 0\r\n\r\n   const container = getContainer()\r\n\r\n   function generateParticle() {\r\n      const size\r\n      = options?.size || sizes[Math.floor(Math.random() * sizes.length)]\r\n      const speedHorz = options?.speedHorz || Math.random() * 10\r\n      const speedUp = options?.speedUp || Math.random() * 25\r\n      const spinVal = Math.random() * 360\r\n      const spinSpeed = Math.random() * 35 * (Math.random() <= 0.5 ? -1 : 1)\r\n      const top = mouseY - size / 2\r\n      const left = mouseX - size / 2\r\n      const direction = Math.random() <= 0.5 ? -1 : 1\r\n\r\n      const particle = document.createElement('div')\r\n\r\n      if (particleType === 'circle') {\r\n         const svgNS = 'http://www.w3.org/2000/svg'\r\n         const circleSVG = document.createElementNS(svgNS, 'svg')\r\n         const circle = document.createElementNS(svgNS, 'circle')\r\n         circle.setAttributeNS(null, 'cx', (size / 2).toString())\r\n         circle.setAttributeNS(null, 'cy', (size / 2).toString())\r\n         circle.setAttributeNS(null, 'r', (size / 2).toString())\r\n         circle.setAttributeNS(\r\n            null,\r\n            'fill',\r\n        `hsl(${Math.random() * 360}, 70%, 50%)`,\r\n         )\r\n\r\n         circleSVG.appendChild(circle)\r\n         circleSVG.setAttribute('width', size.toString())\r\n         circleSVG.setAttribute('height', size.toString())\r\n\r\n         particle.appendChild(circleSVG)\r\n      }\r\n      else {\r\n         particle.innerHTML = `<img src=\"${particleType}\" width=\"${size}\" height=\"${size}\" style=\"border-radius: 50%\">`\r\n      }\r\n\r\n      particle.style.position = 'absolute'\r\n      particle.style.transform = `translate3d(${left}px, ${top}px, 0px) rotate(${spinVal}deg)`\r\n\r\n      container.appendChild(particle)\r\n\r\n      particles.push({\r\n         direction,\r\n         element: particle,\r\n         left,\r\n         size,\r\n         speedHorz,\r\n         speedUp,\r\n         spinSpeed,\r\n         spinVal,\r\n         top,\r\n      })\r\n   }\r\n\r\n   function refreshParticles() {\r\n      particles.forEach((p) => {\r\n         p.left = p.left - p.speedHorz * p.direction\r\n         p.top = p.top - p.speedUp\r\n         p.speedUp = Math.min(p.size, p.speedUp - 1)\r\n         p.spinVal = p.spinVal + p.spinSpeed\r\n\r\n         if (\r\n            p.top\r\n            >= Math.max(window.innerHeight, document.body.clientHeight) + p.size\r\n         ) {\r\n            particles = particles.filter(o => o !== p)\r\n            p.element.remove()\r\n         }\r\n\r\n         p.element.setAttribute(\r\n            'style',\r\n            [\r\n               'position:absolute',\r\n               'will-change:transform',\r\n          `top:${p.top}px`,\r\n          `left:${p.left}px`,\r\n          `transform:rotate(${p.spinVal}deg)`,\r\n            ].join(';'),\r\n         )\r\n      })\r\n   }\r\n\r\n   let animationFrame: number | undefined\r\n\r\n   let lastParticleTimestamp = 0\r\n   const particleGenerationDelay = 30\r\n\r\n   function loop() {\r\n      const currentTime = performance.now()\r\n      if (\r\n         autoAddParticle\r\n         && particles.length < limit\r\n         && currentTime - lastParticleTimestamp > particleGenerationDelay\r\n      ) {\r\n         generateParticle()\r\n         lastParticleTimestamp = currentTime\r\n      }\r\n\r\n      refreshParticles()\r\n      animationFrame = requestAnimationFrame(loop)\r\n   }\r\n\r\n   loop()\r\n\r\n   const isTouchInteraction = 'ontouchstart' in window\r\n\r\n   const tap = isTouchInteraction ? 'touchstart' : 'mousedown'\r\n   const tapEnd = isTouchInteraction ? 'touchend' : 'mouseup'\r\n   const move = isTouchInteraction ? 'touchmove' : 'mousemove'\r\n\r\n   const updateMousePosition = (e: MouseEvent | TouchEvent) => {\r\n      if ('touches' in e) {\r\n         mouseX = e.touches?.[0].clientX\r\n         mouseY = e.touches?.[0].clientY\r\n      }\r\n      else {\r\n         mouseX = e.clientX\r\n         mouseY = e.clientY\r\n      }\r\n   }\r\n\r\n   const tapHandler = (e: MouseEvent | TouchEvent) => {\r\n      updateMousePosition(e)\r\n      autoAddParticle = true\r\n   }\r\n\r\n   const disableAutoAddParticle = () => {\r\n      autoAddParticle = false\r\n   }\r\n\r\n   element.addEventListener(move, updateMousePosition, { passive: true })\r\n   element.addEventListener(tap, tapHandler, { passive: true })\r\n   element.addEventListener(tapEnd, disableAutoAddParticle, { passive: true })\r\n   element.addEventListener('mouseleave', disableAutoAddParticle, {\r\n      passive: true,\r\n   })\r\n\r\n   return () => {\r\n      element.removeEventListener(move, updateMousePosition)\r\n      element.removeEventListener(tap, tapHandler)\r\n      element.removeEventListener(tapEnd, disableAutoAddParticle)\r\n      element.removeEventListener('mouseleave', disableAutoAddParticle)\r\n\r\n      const interval = setInterval(() => {\r\n         if (animationFrame && particles.length === 0) {\r\n            cancelAnimationFrame(animationFrame)\r\n            clearInterval(interval)\r\n\r\n            if (--instanceCounter === 0)\r\n               container.remove()\r\n         }\r\n      }, 500)\r\n   }\r\n}\r\n\r\ninterface CoolModeProps {\r\n   children: ReactNode\r\n   options?: CoolParticleOptions\r\n}\r\n\r\nexport const CoolMode: React.FC<CoolModeProps> = ({ children, options }) => {\r\n   const ref = useRef<HTMLElement>(null)\r\n\r\n   useEffect(() => {\r\n      if (ref.current)\r\n         return applyParticleEffect(ref.current, options)\r\n   }, [options])\r\n\r\n   return React.cloneElement(children as React.ReactElement, { ref })\r\n}\r\n"
    }
  ],
  "type": "components:ui"
}