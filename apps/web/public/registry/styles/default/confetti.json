{
  "name": "confetti",
  "files": [
    {
      "name": "confetti.tsx",
      "content": "import confetti from 'canvas-confetti'\r\nimport type { ReactNode } from 'react'\r\nimport React, { createContext, forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useRef } from 'react'\r\n\r\nimport type {\r\n   GlobalOptions as ConfettiGlobalOptions,\r\n   CreateTypes as ConfettiInstance,\r\n   Options as ConfettiOptions,\r\n} from 'canvas-confetti'\r\nimport { Button } from '~/components/ui/button'\r\nimport type { ButtonProps } from '~/components/ui/button'\r\n\r\ninterface Api {\r\n   fire: (options?: ConfettiOptions) => void\r\n}\r\n\r\ntype Props = React.ComponentPropsWithRef<'canvas'> & {\r\n   options?: ConfettiOptions\r\n   globalOptions?: ConfettiGlobalOptions\r\n   manualstart?: boolean\r\n   children?: ReactNode\r\n}\r\n\r\nexport type ConfettiRef = Api | null\r\n\r\nconst ConfettiContext = createContext<Api>({} as Api)\r\n\r\nconst Confetti = forwardRef<ConfettiRef, Props>((props, ref) => {\r\n   const {\r\n      options,\r\n      globalOptions = { resize: true, useWorker: true },\r\n      manualstart = false,\r\n      children,\r\n      ...rest\r\n   } = props\r\n   const instanceRef = useRef<ConfettiInstance | null>(null) // confetti instance\r\n\r\n   const canvasRef = useCallback(\r\n      // https://react.dev/reference/react-dom/components/common#ref-callback\r\n      // https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\r\n      (node: HTMLCanvasElement) => {\r\n         if (node !== null) {\r\n            // <canvas> is mounted => create the confetti instance\r\n            if (instanceRef.current)\r\n               return // if not already created\r\n            instanceRef.current = confetti.create(node, {\r\n               ...globalOptions,\r\n               resize: true,\r\n            })\r\n         }\r\n         else {\r\n            // <canvas> is unmounted => reset and destroy instanceRef\r\n            if (instanceRef.current) {\r\n               instanceRef.current.reset()\r\n               instanceRef.current = null\r\n            }\r\n         }\r\n      },\r\n      [globalOptions],\r\n   )\r\n\r\n   // `fire` is a function that calls the instance() with `opts` merged with `options`\r\n   const fire = useCallback(\r\n      (opts = {}) => instanceRef.current?.({ ...options, ...opts }),\r\n      [options],\r\n   )\r\n\r\n   const api = useMemo(\r\n      () => ({\r\n         fire,\r\n      }),\r\n      [fire],\r\n   )\r\n\r\n   useImperativeHandle(ref, () => api, [api])\r\n\r\n   useEffect(() => {\r\n      if (!manualstart)\r\n         fire()\r\n   }, [manualstart, fire])\r\n\r\n   return (\r\n      <ConfettiContext.Provider value={api}>\r\n         <canvas ref={canvasRef} {...rest} />\r\n         {children}\r\n      </ConfettiContext.Provider>\r\n   )\r\n})\r\n\r\ninterface ConfettiButtonProps extends ButtonProps {\r\n   options?: ConfettiOptions &\r\n   ConfettiGlobalOptions & { canvas?: HTMLCanvasElement }\r\n   children?: React.ReactNode\r\n}\r\n\r\nfunction ConfettiButton({ options, children, ...props }: ConfettiButtonProps) {\r\n   const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      const rect = event.currentTarget.getBoundingClientRect()\r\n      const x = rect.left + rect.width / 2\r\n      const y = rect.top + rect.height / 2\r\n      confetti({\r\n         ...options,\r\n         origin: {\r\n            x: x / window.innerWidth,\r\n            y: y / window.innerHeight,\r\n         },\r\n      })\r\n   }\r\n\r\n   return (\r\n      <Button onClick={handleClick} {...props}>\r\n         {children}\r\n      </Button>\r\n   )\r\n}\r\n\r\nexport { Confetti, ConfettiButton }\r\n\r\nexport default Confetti\r\n"
    }
  ],
  "type": "components:ui"
}