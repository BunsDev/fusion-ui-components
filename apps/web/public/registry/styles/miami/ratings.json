{
  "name": "ratings",
  "dependencies": [],
  "files": [
    {
      "name": "ratings.tsx",
      "content": "import React from 'react'\nimport { Star } from 'lucide-react'\n\nimport { cn } from '~/lib/utils'\n\nconst ratingVariants = {\n   default: {\n      star: 'text-foreground',\n      emptyStar: 'text-muted-foreground',\n   },\n   destructive: {\n      star: 'text-red-500',\n      emptyStar: 'text-red-200',\n   },\n   yellow: {\n      star: 'text-yellow-500',\n      emptyStar: 'text-yellow-200',\n   },\n}\n\ninterface RatingsProps extends React.HTMLAttributes<HTMLDivElement> {\n   rating: number\n   totalStars?: number\n   size?: number\n   fill?: boolean\n   Icon?: React.ReactElement\n   variant?: keyof typeof ratingVariants\n}\n\nfunction Ratings({ ...props }: RatingsProps) {\n   const {\n      rating,\n      totalStars = 5,\n      size = 20,\n      fill = true,\n      Icon = <Star />,\n      variant = 'default',\n   } = props\n\n   const fullStars = Math.floor(rating)\n   const partialStar\n    = rating % 1 > 0\n       ? (\n          <PartialStar\n             fillPercentage={rating % 1}\n             size={size}\n             className={cn(ratingVariants[variant].star)}\n             Icon={Icon}\n          />\n          )\n       : null\n\n   return (\n      <div className={cn('flex items-center gap-2')} {...props}>\n         {[...Array(fullStars)].map((_, i) =>\n            React.cloneElement(Icon, {\n               key: i,\n               size,\n               className: cn(\n                  fill ? 'fill-current' : 'fill-transparent',\n                  ratingVariants[variant].star,\n               ),\n            }),\n         )}\n         {partialStar}\n         {[...Array(totalStars - fullStars - (partialStar ? 1 : 0))].map((_, i) =>\n            React.cloneElement(Icon, {\n               key: i + fullStars + 1,\n               size,\n               className: cn(ratingVariants[variant].emptyStar),\n            }),\n         )}\n      </div>\n   )\n}\n\ninterface PartialStarProps {\n   fillPercentage: number\n   size: number\n   className?: string\n   Icon: React.ReactElement\n}\nfunction PartialStar({ ...props }: PartialStarProps) {\n   const { fillPercentage, size, className, Icon } = props\n\n   return (\n      <div style={{ position: 'relative', display: 'inline-block' }}>\n         {React.cloneElement(Icon, {\n            size,\n            className: cn('fill-transparent', className),\n         })}\n         <div\n            style={{\n               position: 'absolute',\n               top: 0,\n               overflow: 'hidden',\n               width: `${fillPercentage * 100}%`,\n            }}\n         >\n            {React.cloneElement(Icon, {\n               size,\n               className: cn('fill-current', className),\n            })}\n         </div>\n      </div>\n   )\n}\n\nexport { Ratings }\n"
    }
  ],
  "type": "components:ui"
}
